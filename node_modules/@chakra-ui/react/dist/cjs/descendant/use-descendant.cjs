'use client';
'use strict';

var hooks = require('@chakra-ui/hooks');
var utils = require('@chakra-ui/utils');
var react = require('react');
var descendant = require('./descendant.cjs');
var utils$1 = require('./utils.cjs');

function useDescendants() {
  const descendants = react.useRef(new descendant.DescendantsManager());
  utils$1.useSafeLayoutEffect(() => {
    return () => descendants.current.destroy();
  });
  return descendants.current;
}
const [DescendantsContextProvider, useDescendantsContext] = utils.createContext({
  name: "DescendantsProvider",
  errorMessage: "useDescendantsContext must be used within DescendantsProvider"
});
function useDescendant(options) {
  const descendants = useDescendantsContext();
  const [index, setIndex] = react.useState(-1);
  const ref = react.useRef(null);
  utils$1.useSafeLayoutEffect(() => {
    return () => {
      if (!ref.current)
        return;
      descendants.unregister(ref.current);
    };
  }, []);
  utils$1.useSafeLayoutEffect(() => {
    if (!ref.current)
      return;
    const dataIndex = Number(ref.current.dataset["index"]);
    if (index != dataIndex && !Number.isNaN(dataIndex)) {
      setIndex(dataIndex);
    }
  });
  const refCallback = options ? utils$1.cast(descendants.register(options)) : utils$1.cast(descendants.register);
  return {
    descendants,
    index,
    enabledIndex: descendants.enabledIndexOf(ref.current),
    register: hooks.mergeRefs(refCallback, ref)
  };
}
function createDescendantContext() {
  const ContextProvider = utils$1.cast(DescendantsContextProvider);
  const _useDescendantsContext = () => utils$1.cast(useDescendantsContext());
  const _useDescendant = (options) => useDescendant(options);
  const _useDescendants = () => useDescendants();
  return [
    // context provider
    ContextProvider,
    // call this when you need to read from context
    _useDescendantsContext,
    // descendants state information, to be called and passed to `ContextProvider`
    _useDescendants,
    // descendant index information
    _useDescendant
  ];
}

exports.createDescendantContext = createDescendantContext;
